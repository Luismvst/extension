PROYECTO_MIRAKL_CSV_FIRST_MVP.txt
0) Objetivo (una frase)

Extensión de Chrome (MV3) que intercepta exportaciones CSV de marketplaces Mirakl (Carrefour/Leroy/Adeo), normaliza pedidos y genera un archivo listo para transportistas (TIPSA / OnTime). Fase 2: API-first Mirakl + backend FastAPI para colas, logs, etiquetas y tracking.

1) Contexto y alcance del MVP (CSV-first)

Por qué CSV-first: en MV3 no podemos leer el archivo descargado del disco; la vía sólida es interceptar el click de exportación y fetch del CSV dentro del portal (cookies incluidas). Así, normalizamos localmente y generamos un CSV TIPSA listo para subir.

Alcance MVP:

Portales Mirakl (Carrefour/Leroy/Adeo) → captura CSV de pedidos “pendientes/aceptación/envío”.

Normalización a OrderStandard (TS/Zod).

Mapper TIPSA (CSV placeholder; luego afinamos con spec oficial).

UI popup con configuración mínima y botón “Generar CSV TIPSA”.

Pruebas: samples de CSV, validaciones Zod, e2e ligero con Playwright (portal fake).

Docker para backend y build de la extensión (node builder), docker-compose.

Docs: README + guía técnica + PDF (este ya lo tienes arriba; Cursor generará además otro más completo si lo pides).

No incluido en el MVP (se planifica en Fase 2):

Mirakl Seller API (OR11/12/21/23) para estados y direcciones;

integración real de TIPSA/OnTime API (etiqueta/manifest/tracking);

Stripe/pricing/landing.

2) Arquitectura y estructura de carpetas
extension/                 # Chrome MV3 + React + TS + Tailwind + Zod
  src/
    background/            # service worker (cola, mensajería)
    content/               # hook de exportación CSV + UI/acciones in-portal
    popup/                 # interfaz minimal (lista + generar CSV TIPSA)
    options/               # credenciales/config en storage
    common/                # mensajes, tipos, esquemas Zod
    lib/                   # csv utils, storage, cola
    mappers/               # tipsa.ts (CSV), ontime.ts (placeholder)
    styles/
  public/                  # iconos
  manifest.ts
  vite.config.ts
  package.json

backend/                   # FastAPI + Pydantic + Uvicorn
  app/
    api/                   # routers: health, map, ship, tracking
    core/                  # settings, logging, errors
    models/                # pydantic models (OrderStandard, Carrier payloads)
    services/              # adapters TIPSA/OnTime (stubs)
    utils/                 # parse/normalize helpers
    main.py
  tests/
    unit/
    e2e/
  pyproject.toml
  Dockerfile

tests/                     # Playwright (portal fake) + fixtures de CSV
  playwright/
    e2e.spec.ts
    fixtures/
      carrefour_sample.csv
      leroy_sample.csv

docs/
  README.md                # guía general (top-level)
  ARCHITECTURE.md
  MVP_PLAN.md
  CHANGELOG.md

docker/
  docker-compose.yml       # backend + builder de extensión
  extension.Dockerfile     # build dist
  backend.Dockerfile       # slim Python

.env.example               # variables de entorno
LICENSE

3) Datos y modelo común
OrderStandard

orderId, createdAt, status

items[] { sku, name, qty, unitPrice }

buyer { name, email?, phone? }

shipping { name, address1, address2?, city, postcode, country }

totals { goods, shipping? }

Validación: Zod (frontend) y Pydantic (backend).
Mapeo CSV Mirakl → OrderStandard: columnas típicas (Order ID, Order Date, Status, SKU, Product, Qty, Price, Buyer Name, Buyer Email, Phone, Ship To, Address 1/2, City, Postal Code, Country, Total). Se ajustará con muestras reales.

4) Flujo del MVP

Hook CSV (content script) → intercepta botón/enlace “Exportar CSV” y hace fetch con cookies.

Parseo CSV → PapaParse → filas → OrderStandard (Zod valida).

Encolado (service worker + storage).

Popup → muestra pedidos; botón “CSV TIPSA” genera CSV mapeado y lo descarga.

(Opcional) Enviar a backend FastAPI para: logs, colas, “futuro” etiqueta/tracking.

5) Backend FastAPI (fase opcional en MVP, base creada)

Endpoints:

GET /health

POST /map/tipsa → OrderStandard[] → CSV TIPSA (devuelve text/csv)

POST /ship/tipsa → (stub) aceptará OrderStandard[] y devolverá jobId (a futuro, llamada API TIPSA)

POST /tracking/mirakl → (stub) actualizaría OR23 (fase 2)

Gestión de errores: excepciones propias, códigos 4xx/5xx, mensajes claros.

Logs: estructurados (JSON), sin PII.

6) Seguridad y cumplimiento

PII mínima y efímera (storage local cifrado en fase 2; por ahora ofuscación ligera).

Logs sin PII (anonimizar nombres/teléfonos/emails).

ToS: CSV-first ok; migrar a API Mirakl ASAP para robustez.

7) Calidad y pruebas

Unitarias: parsers, validadores, mapper TIPSA (valida cabeceras, CP, país).

E2E: Playwright con portal fake (link “Export CSV” → intercept → popup genera CSV).

Fixtures: CSVs realistas (1-línea, multi-línea, faltantes).

CI: GitHub Actions (instalar, testear backend y Playwright headless, construir dist).

8) Docker & DevX

backend.Dockerfile: Python slim, uvicorn, healthcheck.

extension.Dockerfile: Node 18, build Vite → artefacto dist/.

docker-compose: servicios backend, extension_build (solo build), volumen ./extension/dist expuesto.

9) Publicación y control de versiones

SemVer 0.1.0.

Commits atómicos (Conv. Commits).

Tags de release.

Push final a origin → https://github.com/Luismvst/extension.git (branch main).

10) Roadmap post-MVP

API Mirakl (OR11/12/21/23), aceptación y tracking.

Integración TIPSA/OnTime con etiqueta PDF/ZPL.

Reglas de servicio (peso, provincias, horarios).

Onboarding UX + Stripe.

Telemetría (consent) y alertas de fallos.

11) Aceptación del MVP (criterios)

Captura CSV en Carrefour/Leroy demo → pedidos aparecen en popup.

Generación CSV TIPSA válido (cabeceras + filas correctas).

Tests unitarios/verdes; e2e básico ok.

Build en Docker y CI ok.

Repo sincronizado en GitHub.

🧠 PROMPT #1 — “MEGA-PROMPT CURSOR” (ejecutar una vez)

Rol: Arquitecto/Implementador full-stack.
Objetivo: Construir un MVP CSV-first para Mirakl→Carriers con extensión MV3 + backend FastAPI + tests + Docker + CI + docs, siguiendo el documento PROYECTO_MIRAKL_CSV_FIRST_MVP.txt situado en la raíz del repo.

Instrucciones generales (best practices)

Escribe primero un Plan detallado (bullets con fases y archivos a crear).

Trabaja por etapas: Implementa → Testea → Documenta → Commit claro.

No toques archivos fuera del plan. Comenta código y añade docstrings.

Incluye manejo de errores y validaciones en cada capa.

Crea scripts (npm/pnpm, make, uvicorn) y comandos reproducibles.

Integra CI GitHub Actions (tests + build).

Prepara Dockerfiles y docker-compose.yml.

Al finalizar, configura git y haz push al repo indicado.

ETAPA A — Inicializar repo y documentos

Crea estructura top-level y agrega este archivo PROYECTO_MIRAKL_CSV_FIRST_MVP.txt (usando el contenido ya proporcionado).

Añade docs/README.md, docs/ARCHITECTURE.md, docs/MVP_PLAN.md, CHANGELOG.md, LICENSE (MIT).

Crea .gitignore (node, python, dist, venv, .pytest_cache, .playwright, pycache).

Crea .env.example con: TIPSATOKEN=, ONTIMETOKEN=, LOG_LEVEL=INFO, BACKEND_PORT=8080.

Commit: chore: init repo structure and docs

ETAPA B — Extensión MV3 (CSV-first)

extension/ con Vite + React + TS + Tailwind + Zod.

manifest.ts MV3, host_permissions para dominios Mirakl/Adeo/Carrefour.

content/hookExport.ts: intercepta click en enlaces/botones “CSV” → fetch → parse (PapaParse) → OrderStandard (Zod).

content/injectButton.ts: botón flotante opcional “Exportar & Enviar (CSV)”.

background/index.ts: cola en chrome.storage, mensajes GET_QUEUE/ENQUEUE/CLEAR.

popup/App.tsx: lista pedidos + “Generar CSV TIPSA” (usa mappers/tipsa.ts).

lib/csv.ts (parse/build), lib/storage.ts (ofuscación ligera), lib/queue.ts.

mappers/tipsa.ts: CSV placeholder con cabeceras: destinatario;direccion;cp;poblacion;pais;contacto;telefono;email;referencia;peso;servicio.

tests/playwright/ con portal fake: una página con botón “Export CSV” que sirve un CSV estático. E2E: clic → se intercepta → popup lista pedidos → generar CSV.

Scripts

extension/package.json: dev, build, test:e2e.

Añade extension/tailwind.config.js, postcss.config.js, styles/index.css.

Commit: feat(extension): MV3 csv-first with TIPSA mapper and popup

ETAPA C — Backend FastAPI (base y stubs)

backend/app/main.py: FastAPI con lifespan, CORS básico.

backend/app/core/settings.py: pydantic-settings (LOG_LEVEL, PORT).

backend/app/core/logging.py: logging JSON, uvicorn config.

backend/app/models/order.py: OrderStandard y OrderItem (Pydantic).

backend/app/services/tipsa.py: map_orders_to_tipsa_csv(orders)->str (mismo formato que front).

backend/app/api/routers.py:

GET /health → {"status":"ok"}

POST /map/tipsa (valida y devuelve text/csv)

POST /ship/tipsa (stub: retorna {jobId})

backend/tests/unit/test_mapping.py: casos de columnas faltantes, qty negativas (rechazo), país y CP.

backend/pyproject.toml: fastapi, uvicorn[standard], pydantic, pytest, httpx.

Commit: feat(backend): FastAPI base with TIPSA mapping and unit tests

ETAPA D — Docker & Compose

docker/backend.Dockerfile (python:3.12-slim, uvicorn, non-root).

docker/extension.Dockerfile (node:18-alpine, build Vite, artefacto en /app/dist).

docker/docker-compose.yml:

backend: build ../backend, porta 8080, healthcheck GET /health.

extension_build: build ../extension, volume ../extension/dist:/artifacts/dist.

Makefile (opcional): make build-ext, make up, make test.

Commit: chore(docker): add Dockerfiles and compose for backend and extension build

ETAPA E — CI (GitHub Actions)

.github/workflows/ci.yml:

Node set-up → pnpm install → pnpm build (extensión).

Python set-up → pytest -q (backend).

(Opcional) Playwright headless con portal fake.

Artefactos: subir extension/dist como artifact.

Commit: ci: add GitHub Actions for build and tests

ETAPA F — Pruebas E2E y fixtures

tests/playwright/e2e.spec.ts con:

servir fixtures/carrefour_sample.csv;

clic en “Export CSV”;

verificar que el popup muestra N pedidos;

generar CSV TIPSA y verificar cabeceras/filas.

Commit: test(e2e): add playwright scenario for csv-first capture

ETAPA G — Documentación y DX

Completar docs/README.md (cómo ejecutar local, cómo cargar dist/ en chrome://extensions, cómo simular portal).

docs/ARCHITECTURE.md: diagrama de flujo CSV-first; ventajas/limitaciones; plan API-first.

docs/MVP_PLAN.md: checklist de aceptación y criterios de calidad.

CHANGELOG.md: 0.1.0.

Commit: docs: complete readmes and architecture notes

ETAPA H — Git remoto y push final

git init (si no está).

git remote add origin https://github.com/Luismvst/extension.git

git branch -M main

git push -u origin main

Commit: N/A (ya empujado)

Verificación final (checklist)

 pnpm -C extension build genera dist/.

 pytest pasa en backend.

 docker compose -f docker/docker-compose.yml up --build levanta backend y construye extensión.

 E2E Playwright ok.

 main en GitHub con CI verde y artifact dist.