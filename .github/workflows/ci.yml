name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.12'

jobs:
  # Extension Tests and Build
  extension:
    name: Extension Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: extension/package-lock.json
        
    - name: Install pnpm
      run: npm install -g pnpm
      
    - name: Install extension dependencies
      working-directory: ./extension
      run: pnpm install --frozen-lockfile
      
    - name: Run extension linting
      working-directory: ./extension
      run: pnpm lint
      
    - name: Run extension type checking
      working-directory: ./extension
      run: pnpm type-check
      
    - name: Run extension unit tests
      working-directory: ./extension
      run: pnpm test --coverage
      
    - name: Build extension
      working-directory: ./extension
      run: pnpm build
      
    - name: Upload extension build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: extension-dist
        path: extension/dist/
        retention-days: 30

  # Backend Tests
  backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov pytest-asyncio httpx
        
    - name: Run backend linting
      working-directory: ./backend
      run: |
        pip install black isort flake8 mypy
        black --check .
        isort --check-only .
        flake8 .
        mypy app/
        
    - name: Run backend unit tests
      working-directory: ./backend
      run: pytest --cov=app --cov-report=xml --cov-report=term-missing
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # E2E Tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [extension, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install pnpm
      run: npm install -g pnpm
      
    - name: Install dependencies
      working-directory: ./tests
      run: pnpm install
      
    - name: Install Playwright browsers
      working-directory: ./tests
      run: pnpm exec playwright install --with-deps
      
    - name: Start test portal
      working-directory: ./tests
      run: pnpm dev:portal &
      
    - name: Wait for portal to be ready
      run: npx wait-on http://localhost:3000
      
    - name: Run E2E tests
      working-directory: ./tests
      run: pnpm test:e2e
      
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: e2e-test-results
        path: tests/test-results/
        retention-days: 7

  # Docker Build and Test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [extension, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/backend.Dockerfile
        push: false
        tags: mirakl-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build extension image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/extension.Dockerfile
        push: false
        tags: mirakl-extension:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test backend container
      run: |
        docker run --rm -d --name test-backend -p 8080:8080 mirakl-backend:latest
        sleep 30
        curl -f http://localhost:8080/api/v1/health/ || exit 1
        docker stop test-backend

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy (only on main branch)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [extension, backend, e2e, docker, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download extension artifacts
      uses: actions/download-artifact@v4
      with:
        name: extension-dist
        path: extension/dist/
        
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes
          - Extension build artifacts
          - Backend API updates
          - E2E test results
          
          ## Downloads
          - Extension: Download from artifacts
          - Backend: Available as Docker image
        draft: false
        prerelease: false
        
    - name: Upload extension as release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: extension/dist/
        asset_name: mirakl-extension-v${{ github.run_number }}.zip
        asset_content_type: application/zip

  # Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [extension, backend, e2e, docker, security]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.extension.result == 'success' && needs.backend.result == 'success' && needs.e2e.result == 'success' && needs.docker.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "✅ All checks passed successfully!"
        echo "Extension, Backend, E2E, Docker, and Security tests all passed."
        
    - name: Notify on failure
      if: ${{ needs.extension.result == 'failure' || needs.backend.result == 'failure' || needs.e2e.result == 'failure' || needs.docker.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "❌ Some checks failed!"
        echo "Extension: ${{ needs.extension.result }}"
        echo "Backend: ${{ needs.backend.result }}"
        echo "E2E: ${{ needs.e2e.result }}"
        echo "Docker: ${{ needs.docker.result }}"
        echo "Security: ${{ needs.security.result }}"
